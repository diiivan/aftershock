#!/bin/sh

# the script assumes that the current user is in group `sudo`
# (can be checked with `groups`) i.e. has root privilleges

error()
{
	echo "Error has occured on step $1" 1>&2
	echo "Please re-run as: ./script $1" 1>&2
	exit 1
}

backup()
{
	if [ ! -f "$1".old ]
	then
		echo "Backing up $1"
		sudo cp "$1" "$1".old
	fi
}

# Update the system & install all the necessary software
install()
{
sudo apt update && sudo apt upgrade -y || error 1
echo "Step 1 (install the required software)"
sudo debconf-set-selections <<EOF
postfix postfix/main_mailer_type select Satellite system
postfix postfix/mailname string localhost
postfix postfix/relayhost string localhost
postfix postfix/destinations string $(hostname -f), localhost
EOF
DEBIAN_FRONTEND=noninteractive sudo apt install -y postfix ufw policykit-1 fail2ban nginx portsentry mailutils openssh-server || error 1
echo "Step 1 finished"
}

# Setting up the network interface enp0s8 for the guest machine being able to connect to the host machine via host-only adapter `vboxnet0`
# Note that before installing the machine this script assumes you have set up two network adapters: 1st is NAT, 2nd is host-only adapter `vboxnet0` with the following settings:
# 1) 192.168.56.1/30 as host machine address in the network
# 2) disabled dhpc
network()
{
	echo "Step 2 (set up a network bridge)"
	echo """network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s3:
      dhcp4: yes
    enp0s8:
      dhcp4: no
      dhcp6: no
      addresses: [192.168.56.2/30]""" | sudo tee /etc/netplan/01-netcfg.yaml > /dev/null &&
	sudo netplan apply || error 2
	echo "Step 2 finished"
}

ssh_setup()
{
	echo "Step 3 (set up ssh server)"
	backup /etc/ssh/sshd_config
	echo """Port 2222
PermitRootLogin no
PasswordAuthentication no""" | sudo tee /etc/ssh/sshd_config > /dev/null &&
	sudo service sshd restart || error 3
	echo "Step 3 finished"
	echo "Now you should be able to connect to the guest machine by typing"
	echo "\`ssh user@192.168.56.2 -p 2222 -i id_rsa\`"
	echo "And then run this script as ./script 4"
	exit 0
}

firewall_setup()
{
	echo "Step 4 (set up firewall)"
	sudo ufw allow 2222/tcp &&
	sudo ufw allow 80/tcp &&
	sudo ufw allow 443 &&
	sudo ufw enable || error 4
	echo "Step 4 finished"
}

dos_protection_setup()
{
	echo "Step 5 (set up DDoS attack protection)"
	backup /etc/fail2ban/jail.conf
	sudo cp config/jail.conf /etc/fail2ban &&
	sudo cp config/http-dos-attack.conf /etc/fail2ban/filter.d &&
	sudo ufw reload &&
	sudo service fail2ban restart || error 5
	echo "Step 5 finished"
}

port_protection()
{
	echo "Step 6 (set up open ports protection)"
	backup /etc/default/portsentry
	sudo cp config/portsentry /etc/default/portsentry || error 6
	backup /etc/portsentry/portsentry.conf
	sudo cp config/portsentry.conf /etc/portsentry/portsentry.conf || error 6
	sudo service portsentry restart || error 6
	echo "step 6 finished"
}

remove_services()
{
	echo "Step 7 (stop unnecessary services)"
	echo -n "rsyslog: "
	sudo service rsyslog stop && echo "[OK]" || echo "[FAIL]"
	echo -n "console-setup.sh: "
	sudo service console-setup.sh stop && echo "[OK]" || echo "[FAIL]"
	echo -n "grub-common: "
	sudo service grub-common stop && echo "[OK]" || echo "[FAIL]"
	echo -n "hwclock.sh: "
	sudo service hwclock.sh stop && echo "[OK]" || echo "[FAIL]"
	echo -n "irqbalance: "
	sudo service irqbalance stop && echo "[OK]" || echo "[FAIL]"
	echo -n "keyboard-setup.sh: "
	sudo service keyboard-setup.sh stop && echo "[OK]" || echo "[FAIL]"
	echo -n "plymouth: "
	sudo service plymouth stop && echo "[OK]" || echo "[FAIL]"
	echo -n "plymouth-log: "
	sudo service plymouth-log stop && echo "[OK]" || echo "[FAIL]"
	echo -n "rsync: "
	sudo service rsync stop && echo "[OK]" || echo "[FAIL]"
	echo -n "rsyslog: "
	sudo service rsyslog stop && echo "[OK]" || echo "[FAIL]"
	echo -n "uuidd: "
	sudo service uuidd stop && echo "[OK]" || echo "[FAIL]"
	echo "step 7 finished"
}

cron_setup()
{
	echo "Step 8 (Set up cron)"
	sudo cp config/updater.sh /root &&
	sudo cp config/monitor.sh /root &&
	sudo cp config/root /var/spool/cron/crontabs || error 8
	echo "Step 8 finished"
}

ssl_cert()
{
	echo "Step 9 (Generate OpenSSL certificate)"
	sudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 -subj /C=RU/CN=192.168.56.2 -keyout /etc/ssl/private/key.pem -out /etc/ssl/certs/cert.pem &&
	echo "Step 9 finished"
}

nginx_setup()
{
	echo "Step 10 (Setup nginx)"
	sudo cp config/self-signed.conf /etc/nginx/snippets &&
	backup /etc/nginx/sites-available/default &&
	sudo cp config/default /etc/nginx/sites-available &&
	sudo service nginx restart || error 10
	sudo cp webapp/* /var/www/html
	echo "Step 10 finished"
}

completed()
{
	echo "Deployment finished"
}

execute()
{
	if [ "$1" = "" -o "$1" = "1" ]
	then
		install
		network
		echo "Now you should set up ssh from the host machine by running host-script\nThen press enter to continue (or stop the script and re-run as ./script 3)"
		read NONE
		ssh_setup
	elif [ "$1" = "2" ]
	then
		network
		echo "Now you should set up ssh from the host machine by running host-script\nThen press enter to continue (or stop the script and re-run as ./script 3)"
		read NONE
		ssh_setup
	elif [ "$1" = "3" ]
	then
		ssh_setup
	elif [ "$1" = "4" ]
	then
		firewall_setup
		dos_protection_setup
		port_protection
		remove_services
		cron_setup
		ssl_cert
		nginx_setup
		completed
	elif [ "$1" = "5" ]
	then
		dos_protection_setup
		port_protection
		remove_services
		cron_setup
		ssl_cert
		nginx_setup
		completed
	elif [ "$1" = "6" ]
	then
		port_protection
		remove_services
		cron_setup
		ssl_cert
		nginx_setup
		completed
	elif [ "$1" = "7" ]
	then
		remove_services
		cron_setup
		ssl_cert
		nginx_setup
		completed
	elif [ "$1" = "8" ]
	then
		cron_setup
		ssl_cert
		nginx_setup
		completed
	elif [ "$1" = "9" ]
	then
		ssl_cert
		nginx_setup
		completed
	elif [ "$1" = "10" ]
	then
		nginx_setup
		completed
	fi
}

if [ "$1" = "1" -o "$1" = "2" -o "$1" = "3" -o "$1" = "4" -o "$1" = "5" -o "$1" = "6" -o "$1" = "7" -o "$1" = "8" -o "$1" = "9" -o "$1" = "10" -o "$1" = "" ]
then
	execute "$1"
else
	echo "Invalid argument"
fi

